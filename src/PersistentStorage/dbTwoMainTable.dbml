// Recommended schema:  effecient and flexible for insertion and retrieval from an API standpoint and for human readers
// store individual measurement or prediction for a given timestamp, location, environmental variable type and data source


// this table stores the actual data values as retrieved or received 
Table s_data_point {
  id int  [pk, not null, increment]       // DB assigned ID USE AUTOINCREMENT

  timeActual datetime [not null]          // the timestamp for the value in UTC GMT
  timeAcquired datetime [not null]        // When the data was inserted by us

  dataValue varchar(20) [not null]        // actual value for the data points
  unitsCode varchar(6) [not null]         // unit for the value (e.g., Farheneit, Celcius, m/s, etc)  

  sLocationCode varchar(25) [not null]    // CBI specific ID for the location 
  dataSourceCode varchar(10) [not null]   // the code for the source from which the value was obtained:  e.g, NOAA, NDFD, TCOON, etc.                                                                                                               
  seriesCode varchar(10) [not null]       // the code for the type of measurement or prediction.  E.g., wdir, wspeed, wlevel, wtemp, offswl, harmonic, etc..
  datumCode varchar(10)                   // the datum(e.g., water-levle, harmonic)                                                                                                                                                                                                           
  latitude varchar(16)                    // the latitude of the location for which the data point is provided
  longitude varchar(16)                   // the longitude of the location for which the data point is provided

  Indexes {
    (timeActualized, timeAcquired, seriesCode, sLocationCode, dataSourceCode) [unique]
  }
}

//A table for AI predictions, holds the same data of a measurment, but also the predicted time and the verification time                                                    !!! Make Table
Table s_prediction {
  id int  [pk, not null, increment]       // DB assigned ID USE AUTOINCREMENT

  timeGenerated datetime [not null]       // the time the data was created, or for an AI when the prediction was made
  leadTime float [not null]               // lead time by hour

  dataValue varchar(20) [not null]        // actual value for the data points
  unitsCode varchar(6) [not null]         // unit for the value (e.g., Farheneit, Celcius, m/s, etc)  

  resultCode int //turn into varchar

  sLocationCode varchar(25) [not null]    // CBI specific ID for the location 
  dataSourceCode varchar(10)              // the code for the source from which the value was obtained:  e.g, NOAA, NDFD, TCOON, etc.                                                                                                               
  seriesCode varchar(10)                  // the code for the type of measurement or prediction.  E.g., wdir, wspeed, wlevel, wtemp, offswl, harmonic, etc..
  datumCode varchar(10)                   // the datum(e.g., water-levle, harmonic)                                                                                                                                                                                                                  
  latitude varchar(16)                    // the latitude of the location for which the data point is provided
  longitude varchar(16)                   // the longitude of the location for which the data point is provided

  Indexes {
    (AIName, timeGenerated, datumCode) [unique]                                                                                                                    
  }
}


// this table provides a way to specify a location code that is specific to a datasource and is needed
// when retrieving data from that source.  For example, when retrieving data from NOAA Tides and Currents {TaC)
// we must use TaC's specific location code {not long and lat). So, in this table, we store the mappings
// between the CBI specific location code {e.g., 'AransasPassChannel') and the TaC location code for that
// station {e.g., '8775241').  So the overall row for that station and TaC would look like this:
// 'AransasPassChannel', 'NOAA_TAC', '8775241', 1, datetime{'now'), 'nc-metocean-depl'
Table s_locationCode_dataSourceLocationCode_mapping {
    id int [pk, not null, increment]
    sLocationCode varchar(25) [not null]      //local                                                                                                                                             
    dataSourceCode varchar(10) [not null]     //source
    dataSourceLocationCode varchar(255) [not null]
    priorityOrder int [not null]              // supoprts providing multiple mappings for the same location and pririoritize them
    
    Indexes {
		  (sLocationCode, dataSourceCode, priorityOrder) [unique]
	}
}


// the following are reference tables mostly used for the human reader - they are not needed but nice to have. For example, for coders 
//  who may be looking for valid values to use for type code and data source code, or as a quick reference of what location a CBI ID refers to
Table s_ref_slocation {
  id int [pk, not null, increment]
  code varchar(25) [not null]
  displayName varchar(30)
  notes varchar(250)
 
  Indexes {
   (code) [unique]
	}
}


Table s_ref_data_source {
  id int [pk, not null, increment]
  code char(10) [not null]
  displayName varchar(30)
  notes varchar(250)
    
	Indexes {
		(code) [unique]
	}
}


Table s_ref_series{
  id int [pk, not null, increment]
  code char(10) [not null]
  displayName varchar(30)
  notes varchar(250)
	
	Indexes {
		(code) [unique]
	}
}


Table s_ref_units {
  id int [pk, not null, increment]
  code char(10) [not null]
  displayName varchar(30)
  notes varchar(250)
	
	Indexes {
		(code) [unique]
	}
}


Table s_ref_datum {                                                                                                                                                                         
  id int [pk, not null, increment]
  code char(10) [not null]
  displayName varchar(30)
  notes varchar(250)
	
	Indexes {
		(code) [unique]
	}
}

Table s_ref_resultCode {                                                                                                                                                                         
  id int [pk, not null, increment]
  code char(10) [not null]
  displayName varchar(30)
  notes varchar(250)
	
	Indexes {
		(code) [unique]
	}
}



Ref: "s_ref_series"."code" < "s_data_point"."seriesCode"

Ref: "s_ref_units"."code" < "s_data_point"."unitsCode"

Ref: "s_ref_datum"."code" < "s_data_point"."datumCode"

Ref: "s_ref_slocation"."sLocationCode" < "s_data_point"."sLocationCode"

Ref: "s_ref_data_source"."code" < "s_locationCode_dataSourceLocationCode_mapping"."dataSourceCode"

Ref: "s_ref_data_source"."code" < "s_data_point"."dataSourceCode"

Ref: "s_ref_slocation"."sLocationCode" < "s_locationCode_dataSourceLocationCode_mapping"."sLocationCode"

Ref: "s_locationCode_dataSourceLocationCode_mapping"."sLocationCode" <> "s_data_point"."sLocationCode"

Ref: "s_locationCode_dataSourceLocationCode_mapping"."dataSourceCode" <> "s_data_point"."dataSourceCode"