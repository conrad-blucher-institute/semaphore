// Recommended schema:  effecient and flexible for insertion and retrieval from an API standpoint and for human readers
// store individual measurement or prediction for a given timestamp, location, environmental variable type and data source


// this table stores the actual data values as retrieved or received 
Table s_data_point {
  id int  [pk, not null, increment]      // DB assigned ID                                                                                                                                  ??? Changed to incrament.
  valueTimestamp varchar(20) [not null]  // the timestamp for the value in UTC                                                                                                              ??? Switched to UTC time.
  dataValue varchar(10) [not null]       // actual value for the data points
  sLocationCode varchar(25) [not null]   // CBI specific ID for the location 
  dataSourceCode varchar(10) [not null]  // the code for the source from which the value was obtained:  e.g, NOAA, NDFD, TCOON, etc.                                                                                                               
  seriesCode varchar(10) [not null]      // the code for the type of measurement or prediction.  E.g., wdir, wspeed, wlevel, wtemp, offswl, harmonic, etc..
  datumCode varchar(10)                  // the datum(e.g., water-levle, harmonic)                                                                                                          ??? Datum = smallest point of data? Or something else? 
  unitsCode varchar(6) [not null]        // unit for the value (e.g., Farheneit, Celcius, m/s, etc)                                                                                                        
  latitude int                           // the latitude of the location for which the data point is provided
  longitude int                          // the longitude of the location for which the data point is provided
  _dateCreated varchar(20) [not null]    // metadata tells us when the row as insterted
  _dateUpdated varchar(20)               // metadata tells us when/whether the row was updated
  _createdBy varchar(20) [not null]      // metadata tells us who/what created the row
  _updatedBy varchar(20)                 // metaata tells us who/what updated the row
  Indexes {
    (valueTimestamp, seriesCode, sLocationCode, dataSourceCode) [unique]                                                                                                                    //???Include Datum in uniqueness?
  }
}


// this table provides a way to specify a location code that is specific to a datasource and is needed
// when retrieving data from that source.  For example, when retrieving data from NOAA Tides and Currents {TaC)
// we must use TaC's specific location code {not long and lat). So, in this table, we store the mappings
// between the CBI specific location code {e.g., 'AransasPassChannel') and the TaC location code for that
// station {e.g., '8775241').  So the overall row for that station and TaC would look like this:
// 'AransasPassChannel', 'NOAA_TAC', '8775241', 1, datetime{'now'), 'nc-metocean-depl'
Table s_locationCode_dataSourceLocationCode_mapping {                                                                                                                                         //??? Will this be future minded enough? Info slots?
    id int [pk, not null, increment]
    sLocationCode varchar(25) [not null]      //local                                                                                                                                             
    dataSourceCode varchar(10) [not null]     //source
    dataSourceLocationCode varchar(10) [not null]
    priorityOrder int [not null]              // supoprts providing multiple mappings for the same location and pririoritize them
    _dateCreated varchar(20) [not null]       // metadata tells us when the row as insterted
    _dateUpdated varchar(20)                  // metadata tells us when/whether the row was updated
    _createdBy varchar(20) [not null]         // metadata tells us who/what created the row
    _updatedBy varchar(20)                    // metaata tells us who/what updated the row
    
    Indexes {
		  (sLocationCode, dataSourceCode, priorityOrder) [unique]
	}
}


// the following are reference tables mostly used for the human reader - they are not needed but nice to have. For example, for coders 
//  who may be looking for valid values to use for type code and data source code, or as a quick reference of what location a CBI ID refers to
Table s_ref_slocation {
  id int [pk, not null, increment]
  sLocationCode varchar(10) [not null]
  displayName varchar(30)
  notes varchar(250)
  _dateCreated varchar(20) [not null]       // metadata tells us when the row as insterted
  _dateUpdated varchar(20)                  // metadata tells us when/whether the row was updated
  _createdBy varchar(20) [not null]         // metadata tells us who/what created the row
  _updatedBy varchar(20)                    // metaata tells us who/what updated the row
 
  Indexes {
   (sLocationCode) [unique]
	}
}


Table s_ref_data_source {
  id int [pk, not null, increment]
  code char(10) [not null]
  displayName varchar(30)
  notes varchar(250)
  _dateCreated varchar(20) [not null]      // metadata tells us when the row as insterted
  _dateUpdated varchar(20)                 // metadata tells us when/whether the row was updated
  _createdBy varchar(20) [not null]        // metadata tells us who/what created the row
  _updatedBy varchar(20)                   // metaata tells us who/what updated the row
    
	Indexes {
		(code) [unique]
	}
}


Table s_ref_series{
  id int [pk, not null, increment]
  code char(10) [not null]
  displayName varchar(30)
  recommendedUnitsCode varchar (6) [not null]
  notes varchar(250)
  _dateCreated varchar(20) [not null]      // metadata tells us when the row as insterted
  _dateUpdated varchar(20)                 // metadata tells us when/whether the row was updated
  _createdBy varchar(20) [not null]        // metadata tells us who/what created the row
  _updatedBy varchar(20)                   // metaata tells us who/what updated the row
	
	Indexes {
		(code) [unique]
	}
}


Table s_ref_units {
  id int [pk, not null, increment]
  code char(10) [not null]
  displayName varchar(30)
  notes varchar(250)
  _dateCreated varchar(20) [not null]      // metadata tells us when the row as insterted
  _dateUpdated varchar(20)                 // metadata tells us when/whether the row was updated
  _createdBy varchar(20) [not null]        // metadata tells us who/what created the row
  _updatedBy varchar(20)                   // metaata tells us who/what updated the row
	
	Indexes {
		(code) [unique]
	}
}


Table s_ref_datum {                                                                                                                                                                         //??? Datum reference table?
  id int [pk, not null, increment]
  code char(10) [not null]
  displayName varchar(30)
  notes varchar(250)
  _dateCreated varchar(20) [not null]      // metadata tells us when the row as insterted
  _dateUpdated varchar(20)                 // metadata tells us when/whether the row was updated
  _createdBy varchar(20) [not null]        // metadata tells us who/what created the row
  _updatedBy varchar(20)                   // metaata tells us who/what updated the row
	
	Indexes {
		(code) [unique]
	}
}

Ref: "s_ref_series"."code" < "s_data_point"."seriesCode"

Ref: "s_ref_units"."code" < "s_data_point"."unitsCode"

Ref: "s_ref_datum"."code" < "s_data_point"."datumCode"

Ref: "s_ref_slocation"."sLocationCode" < "s_data_point"."sLocationCode"

Ref: "s_ref_data_source"."code" < "s_locationCode_dataSourceLocationCode_mapping"."dataSourceCode"

Ref: "s_ref_data_source"."code" < "s_data_point"."dataSourceCode"

Ref: "s_ref_slocation"."sLocationCode" < "s_locationCode_dataSourceLocationCode_mapping"."sLocationCode"

Ref: "s_locationCode_dataSourceLocationCode_mapping"."sLocationCode" <> "s_data_point"."sLocationCode"

Ref: "s_locationCode_dataSourceLocationCode_mapping"."dataSourceCode" <> "s_data_point"."dataSourceCode"